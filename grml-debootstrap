#!/bin/sh
# Filename:      grml-bootstrap
# Purpose:       wrapper around debootstrap for installing plain Debian via grml
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
# Latest change: Mon Apr 09 14:35:18 CEST 2007 [mika]
################################################################################
# http://www.debian.org/releases/stable/i386/apcs04.html.en

set -e # exit on any error

. /etc/grml/lsb-functions
. /etc/grml/script-functions

# inside the chroot system the locales might not be available, so use minimum:
export LANG=C
export LC_ALL=C

VERSION='0.6'

case $* in
   -h*|--h*)
     einfo "$0 - wrapper around debootstrap for installing plain Debian via grml"
     einfo "Adjust /etc/debootstrap/config and invoke $0 afterwards."
     eend 0
     exit 0
   ;;
   -v|--v*)
     einfo "$0 version $VERSION"
     einfo "Send bug reports to Michael Prokop <mika@grml.org>."
     eend 0
     exit 0
   ;;
esac

check4progs debootstrap || exit 1
check4root || exit 1

# without config file it won't work
if [ -r /etc/debootstrap/config ] ; then
   . /etc/debootstrap/config
else
   echo "/etc/debootstrap/config could not be read, exiting."
   exit 1
fi

# make sure at least $TARGET is set [the partition for the new system]
if [ -z "$TARGET" ] ; then
   eerror "Please adjust /etc/debootstrap/config before running ${0}" ; eend 1
   exit 1
fi

function bailout(){
  # make sure $TARGET is not mounted when exiting grml-debootstrap
  if [ -n "$TARGET" ] ; then
     if grep -q $TARGET /proc/mounts ; then
        echo "Unmounting $TARGET"
        umount "$TARGET"
     fi
  fi
  [ -n "$1" ] && EXIT="$1" || EXIT="1"
  exit "$EXIT"
}

trap bailout 1 2 3 15

PARTITION=''
DIRECTORY=''

case $TARGET in
  /dev/*)
    PARTITION=1
    ;;
  *)
    # assume we are installing into a directory, don't run mkfs and grub related stuff therefore
    DIRECTORY=1
    MNTPOINT="$TARGET"
    MKFS=''
    TUNE2FS=''
    FSCK=''
    GRUB=''
    GROOT=''
    ;;
esac

# user should recheck his configuration
einfo "$0 - Please recheck configuration before execution:"
echo "
   Target:           $TARGET"
   case "$MNTPOINT" in "$TARGET") ;; *) echo "   Mount-point:      $MNTPOINT" ;; esac
   [ -n "$GRUB" ] && echo "   Install grub to:  $GROOT / $GRUB"
   case "$MNTPOINT" in "$TARGET") ;; *) echo "  Important! Continuing will delete all data from ${TARGET}!" ;; esac
   echo
einfon "Is this ok for you? [y/N] "

read a
if ! [ "$a" = 'y' -o "$a" = 'Y' ] ; then
   eerror "Exiting as requested." ; eend 1
   exit 1
fi

if [ -n "$MKFS" ] ; then
   einfo "Running $MKFS on $TARGET"
   $MKFS $TARGET
   eend $?
fi

if [ -n "$TUNE2FS" ] ; then
   einfo "Disabling automatic filesystem check on $TARGET via tune2fs"
   $TUNE2FS $TARGET
   eend $?
fi


# now mount the new partition or if it's a directory do nothing at all
if [ -n "$DIRECTORY" ] ; then
   einfo "Running grml-debootstrap on a directory, nothing to mount."
else
   if grep -q $TARGET /proc/mounts ; then
      eerror "$TARGET already mounted, exiting."
   else
     [ -n "$MNTPOINT" ] || MNTPOINT='/mnt/test'
     [ -d "$MNTPOINT" ] || mkdir -p "$MNTPOINT"
     einfo "Mounting $TARGET to $MNTPOINT"
     mount -o rw,suid,dev $TARGET $MNTPOINT
     eend $?
   fi
fi

# get main packages from a debian-mirror
if [ -n "$ARCH" ] ; then
   ARCHCMD="--arch $ARCH"
   ARCHINFO=" (${ARCH})"
fi
einfo "Running $DEBOOTSTRAP for release ${RELEASE}${ARCHINFO} using mirror $MIRROR"
$DEBOOTSTRAP $ARCHCMD $RELEASE $MNTPOINT $MIRROR
eend $?

einfo "Preparing chroot system"
  cp $CONFFILES/chroot-script $MNTPOINT/bin/chroot-script
  chmod 755 $MNTPOINT/bin/chroot-script
  mkdir $MNTPOINT/etc/debootstrap/

  # make sure we have our files for later use via chroot-script
  cp /etc/debootstrap/config $MNTPOINT/etc/debootstrap/
  cp /etc/debootstrap/packages $MNTPOINT/etc/debootstrap/packages

  # make sure we can access network [relevant for cdebootstrap]
  [ -f "$MNTPOINT/etc/resolv.conf" ] || cp /etc/resolv.conf $MNTPOINT/etc/resolv.conf

  # setup default locales
  [ -n "$LOCALES" ] && cp /etc/debootstrap/locale.gen  $MNTPOINT/etc/locale.gen

  # copy any existing existing files to chroot
  [ -d /etc/debootstrap/boot  ] && cp -a /etc/debootstrap/boot/*  $MNTPOINT/boot/
  [ -d /etc/debootstrap/etc   ] && cp -a /etc/debootstrap/etc/*   $MNTPOINT/etc/
  [ -d /etc/debootstrap/share ] && cp -a /etc/debootstrap/share/* $MNTPOINT/share/
  [ -d /etc/debootstrap/usr   ] && cp -a /etc/debootstrap/usr/*   $MNTPOINT/usr/
  [ -d /etc/debootstrap/var   ] && cp -a /etc/debootstrap/var/*   $MNTPOINT/var/
eend 0

einfo "Executing chroot-script now"
chroot "$MNTPOINT" /bin/chroot-script
eend $?

# einfo "Removing chroot-script"
# rm -f  $MNTPOINT/bin/chroot-script
# rm -rf $MNTPOINT/etc/debootstrap/
# eend $?

if [ -z "$GRUB" -o -z "$GROOT" ] ; then
   echo "Notice: \$GRUB or \$GROOT not defined, will not install grub therefor."
else
   einfo "Installing grub on ${GRUB}:"
   grub-install --root-directory="$MNTPOINT" "(${GRUB})"
   eend $?
fi

if [ -n "$PARTITION" ] ; then
   einfo "Unmount $MNTPOINT"
   umount $MNTPOINT
   eend $?
fi

if [ "$FSCK" = 'yes' ] ; then
   [ -n "$FSCKTOOL" ] || FSCKTOOL="fsck.${MKFS#mkfs.}"
   einfo "Checking filesystem on $TARGET using $FSCKTOOL"
   $FSCKTOOL $TARGET
   eend $?
fi

einfo "Finished execution of $0 - enjoy your Debian system." ; eend 0

## END OF FILE #################################################################
