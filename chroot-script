#!/bin/sh
# Filename:      /etc/debootstrap/chroot-script
# Purpose:       script executed in chroot when installing Debian via grml-debootstrap
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
# Latest change: Mon Apr 09 23:27:30 CEST 2007 [mika]
################################################################################

set -e # exit on any error

. /etc/debootstrap/config || exit 1

if [ -z "$STAGES" ] ; then
   STAGES='/etc/debootstrap/stages'
   [ -d "$STAGES" ] || mkdir -p "$STAGES"
fi

stage() {
  # error handling
  if [ -z "$1" ] ; then
     eerror 'Error: stage() requires at least one argument.'
     eend 1
     return 1
  fi
  if [ -z "$STAGES" ] ; then
     eerror 'Error: $STAGES not set.'
     eend 1
     return 1
  fi
  # main function
  if grep -q done "$STAGES/$1" 2>/dev/null ; then
     ewarn "Notice: stage $1 has been executed already, skipping execution therefore." ; eend 0
  else
     echo "$2" > "$STAGES/$1"
  fi
}

[ -r /proc/1 ] || mount -t proc   none /proc

if [ -n "$CHROOTMIRROR" ] ; then
   stage chrootmirror
   echo "deb $CHROOTMIRROR $RELEASE main contrib non-free" > /etc/apt/sources.list
   stage chrootmirror done
fi

if [ -n "$GRMLREPOS" ] ; then
   stage grmlrepos
   echo 'deb     http://grml.org/repos/ ./' >> /etc/apt/sources.list
   stage grmlrepos done
fi

if ! [ -r /etc/kernel-img.conf ] ; then
   stage kernelimg.conf
   echo "Setting up /etc/kernel-img.conf"
   cat > /etc/kernel-img.conf << EOF
# Kernel Image management overrides
# See kernel-img.conf(5) for details
do_initrd = Yes
do_symlinks = Yes
EOF
   stage kernelimg.conf done
fi

# create default devices
if ! [ -r /dev/hda20 ] ; then
   stage makedev
   echo "Creating generic devices in /dev - this might take a while..."
   cd /dev && MAKEDEV generic
   stage makedev done
fi

# install additional packages
if [ "$PACKAGES" = 'yes' ] ; then
   stage packages
   if ! [ -r /etc/debootstrap/packages ] ; then
     echo "Error: /etc/debootstrap/packages not found, exiting."
     exit 1
   else
     apt-get update
     apt-get --force-yes -y install $(cat /etc/debootstrap/packages) $GRMLPACKAGES
   fi
   stage packages done
fi

# sarge specific stuff
if [ "$RELEASE" = 'sarge' ] ; then
   stage mkinitrd
   sed -i "s#ROOT=probe#ROOT=$TARGET#" /etc/mkinitrd/mkinitrd.conf
   stage mkinitrd done
fi

if [ -n "$KERNEL" ] ; then
   stage kernel
   apt-get update
   if [ "$RELEASE" = 'sarge' ] ; then
      KERNELPACKAGES="kernel-image-$KERNEL kernel-headers-$KERNEL"
   else
      KERNELPACKAGES="linux-image-$KERNEL linux-headers-$KERNEL"
   fi
   apt-get --force-yes -y install $KERNELPACKAGES
   stage kernel done
fi

if [ -n "$RECONFIGURE" ] ; then
   stage reconfigure
   for package in $RECONFIGURE ; do
       dpkg --list $package 1>/dev/null 2>/dev/null && dpkg-reconfigure $package || echo "Warning: $package does not exist, can not reconfigure it."
   done
   stage reconfigure done
fi

# set password of user root
stage passwords
echo "Activating shadow passwords."
shadowconfig on
echo "Setting password for user root:"
set +e # do not exit if passwd returns error due to missmatching passwords
passwd
echo ""
set -e # restore default behaviour again
stage passwords done

if ! [ -f /etc/hosts ] ; then
   stage hosts
   echo "Setting up /etc/hosts"
   echo "127.0.0.1       localhost  $HOSTNAME" > /etc/hosts
   stage hosts done
fi

if ! [ -f /etc/network/interfaces ] ; then
   stage interfaces
   echo "Setting up /etc/network/interfaces"
   cat >> /etc/network/interfaces << EOF
iface lo inet loopback
iface eth0 inet dhcp
auto lo
auto eth0
EOF
   stage interfaces done
fi

# adjust timezone
if [ -n "$TIMEZONE" ] ; then
   stage timezone
   echo "Adjusting /etc/localtime"
   ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
   stage timezone done
fi

createfstab(){
   echo "Setting up /etc/fstab"
cat > /etc/fstab << EOF
$TARGET      /            auto    defaults,errors=remount-ro 0   1
/sys           /sys         sysfs   rw,nosuid,nodev,noexec     0   0
proc           /proc        proc    defaults                   0   0
/dev/cdrom     /mnt/cdrom0  iso9660 ro,user,noauto             0   0
# some other examples:
# /dev/sda2       none         swap    sw                   0   0
# /dev/hda1       /Grml        ext3    dev,suid,user,noauto 0  2
# //1.2.3.4/pub   /smb/pub     smbfs   defaults,user,noauto,uid=grml,gid=grml 0 0
# linux:/pub      /beer        nfs     defaults             0  0
# tmpfs           /tmp         tmpfs   size=300M            0  0
EOF
}

# set up /etc/fstab if file is not present (cdebootstrap)
if [ ! -f /etc/fstab  ] ; then
   stage fstab
   createfstab
   stage fstab done
fi

# set up /etc/fstab if file is UNCONFIGURED (debootstrap)
if grep -q UNCONFIGURED /etc/fstab ; then
   stage fstab
   createfstab
   stage fstab done
fi

# set up hostname
if [ -n "$HOSTNAME" ] ; then
   stage hostname
   echo "Setting hostname to ${HOSTNAME}."
   echo "$HOSTNAME" > /etc/hostname
   stage hostname done
fi

# assume the first available kernel as our main kernel
KERNELIMG=$(ls -1 /boot/vmlinuz-* | head -1)
KERNELVER=${KERNELIMG#/boot/vmlinuz-}

# generate initrd
if [ -n "$INITRD" ] ; then
   stage initrd
   if [ "$RELEASE" = 'sarge' ] ; then
      echo "Release sarge detected, will not create an initrd."
   else
      echo "Generating initrd."
      update-initramfs -c -t -k $KERNELVER
      if [ -f "/boot/initrd.img-$KERNELVER" ] ; then
         GRUBINITRD="initrd          /boot/initrd.img-$KERNELVER"
         LILOINITRD="        initrd=/boot/initrd.img-$KERNELVER"
      fi
   fi
   stage initrd done
fi

if [ -z "$GROOT" ] ; then
   echo "Warning: \$GROOT is not defined, will not adjust grub configuration therefore."
else
   stage grub
   echo "Adjusting grub configuration for use on ${GROOT}."

   # copy stage-files to /boot/grub/
   [ -d /boot/grub/ ] || mkdir /boot/grub
   if [ -d /usr/lib/grub/i386-pc/ ] ; then
      cp /usr/lib/grub/i386-pc/* /boot/grub/
   else
      # sarge ships grub files in another directory
      cp /lib/grub/i386-pc/* /boot/grub/
   fi

   # finally install grub
   update-grub -y
   sed -i "s/^# groot=.*/# groot=(${GROOT})/g" /boot/grub/menu.lst
   sed -i "s|^# kopt=root=.*|# kopt=root=${TARGET} ro|g" /boot/grub/menu.lst
   # not sure why savedefault does not work for me; any ideas?
   sed -i "s/^savedefault.*/# &/g" /boot/grub/menu.lst
   update-grub -y
   stage grub done
fi

# make sure we don't have any running processes left
for service in ssh mdadm mdadm-raid ; do
    [ -x "/etc/init.d/$service" ] && "/etc/init.d/$service" stop
done

# unmount all filesystems in chroot, make sure nothing is left...
umount -a    1>/dev/null 2>/dev/null || true
umount /proc 1>/dev/null 2>/dev/null || true
umount /proc 1>/dev/null 2>/dev/null || true
umount -a    1>/dev/null 2>/dev/null || true

# finally exit the chroot
echo "Finished chroot installation, exiting."
exit 0

## END OF FILE #################################################################
